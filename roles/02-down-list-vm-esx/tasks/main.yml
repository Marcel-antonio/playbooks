# tasks file for 02-down-list-vm-esx (STOP)

- name: Déboguer les identifiants ESX
  ansible.builtin.debug:
    msg: |
      ESX1 = {{ esx1_hostname }} / {{ esx1_username }} / {{ '*' * (esx1_password | length) }}
      ESX2 = {{ esx2_hostname }} / {{ esx2_username }} / {{ '*' * (esx2_password | length) }}

- name: Vérifier que les variables sensibles sont définies pour ESX1
  ansible.builtin.assert:
    that:
      - esx1_hostname != 'CHANGEMOI'
      - esx1_username != 'CHANGEMOI'
      - esx1_password != 'CHANGEMOI'
    fail_msg: "Variables ESX1 non définies correctement."

- name: Vérifier que les variables sensibles sont définies pour ESX2
  ansible.builtin.assert:
    that:
      - esx2_hostname != 'CHANGEMOI'
      - esx2_username != 'CHANGEMOI'
      - esx2_password != 'CHANGEMOI'
    fail_msg: "Variables ESX2 non définies correctement."

- name: Récupérer les VMs sur ESX1
  community.vmware.vmware_vm_info:
    hostname: "{{ esx1_hostname }}"
    username: "{{ esx1_username }}"
    password: "{{ esx1_password }}"
    validate_certs: "{{ esx1_validate_certs | default(false) }}"
  register: vms_esx1

- name: Récupérer les VMs sur ESX2
  community.vmware.vmware_vm_info:
    hostname: "{{ esx2_hostname }}"
    username: "{{ esx2_username }}"
    password: "{{ esx2_password }}"
    validate_certs: "{{ esx2_validate_certs | default(false) }}"
  register: vms_esx2

- name: Fusionner les deux listes de VMs
  ansible.builtin.set_fact:
    all_vms: "{{ (vms_esx1.virtual_machines | default([])) + (vms_esx2.virtual_machines | default([])) }}"

- name: Extraire les VMs à ARRÊTER depuis l'inventaire
  ansible.builtin.set_fact:
    target_vms: >-
      {{ all_vms
         | selectattr('guest_name', 'defined')
         | selectattr('guest_name', 'in', groups['all'])
         | list }}

- name: Afficher les VMs ciblées
  ansible.builtin.debug:
    var: target_vms

- name: Rien à faire si la liste est vide
  ansible.builtin.debug:
    msg: "Aucune VM de l'inventaire à arrêter."
  when: (target_vms | length) == 0

# Séparer par hôte + ne garder que celles allumées
- name: Calculer les listes par hôte ESXi (on garde uniquement poweredOn)
  ansible.builtin.set_fact:
    targets_esx1_on: >-
      {{ target_vms
         | selectattr('esxi_hostname', 'search', '(?i)\\besx01\\b')
         | selectattr('power_state', 'equalto', 'poweredOn')
         | list }}
    targets_esx2_on: >-
      {{ target_vms
         | selectattr('esxi_hostname', 'search', '(?i)\\besx02\\b')
         | selectattr('power_state', 'equalto', 'poweredOn')
         | list }}

- name: Debug tailles des listes
  ansible.builtin.debug:
    msg: |
      ESX1 (à arrêter) -> {{ targets_esx1_on | length }} VMs
      ESX2 (à arrêter) -> {{ targets_esx2_on | length }} VMs

# Tentative d'arrêt propre via VMware Tools
- name: Shutdown-guest sur ESX01 (gracieux)
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ esx1_hostname }}"
    username: "{{ esx1_username }}"
    password: "{{ esx1_password }}"
    validate_certs: "{{ esx1_validate_certs | default(false) }}"
    uuid: "{{ item.uuid }}"
    state: shutdown-guest
    state_change_timeout: 120
  loop: "{{ targets_esx1_on }}"
  when: targets_esx1_on | length > 0
  register: shutdown_esx1

- name: Shutdown-guest sur ESX02 (gracieux)
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ esx2_hostname }}"
    username: "{{ esx2_username }}"
    password: "{{ esx2_password }}"
    validate_certs: "{{ esx2_validate_certs | default(false) }}"
    uuid: "{{ item.uuid }}"
    state: shutdown-guest
    state_change_timeout: 120
  loop: "{{ targets_esx2_on }}"
  when: targets_esx2_on | length > 0
  register: shutdown_esx2

# Forcer l'arrêt si toujours allumée (au cas où VMware Tools absent / timeout)
- name: Power-off forcé ESX01 (fallback)
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ esx1_hostname }}"
    username: "{{ esx1_username }}"
    password: "{{ esx1_password }}"
    validate_certs: "{{ esx1_validate_certs | default(false) }}"
    uuid: "{{ item.uuid }}"
    state: powered-off
    force: true
    state_change_timeout: 60
  loop: "{{ targets_esx1_on }}"
  when: targets_esx1_on | length > 0
  register: poweroff_esx1

- name: Power-off forcé ESX02 (fallback)
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ esx2_hostname }}"
    username: "{{ esx2_username }}"
    password: "{{ esx2_password }}"
    validate_certs: "{{ esx2_validate_certs | default(false) }}"
    uuid: "{{ item.uuid }}"
    state: powered-off
    force: true
    state_change_timeout: 60
  loop: "{{ targets_esx2_on }}"
  when: targets_esx2_on | length > 0
  register: poweroff_esx2

# Résumés lisibles
- name: Résumé arrêt ESX01
  ansible.builtin.debug:
    msg:
      attempted: "{{ (targets_esx1_on | map(attribute='guest_name') | list) | default([]) }}"
      shutdown_guest_changed: "{{ (shutdown_esx1.results | default([])) | selectattr('changed') | map(attribute='item.guest_name') | list }}"
      poweroff_changed: "{{ (poweroff_esx1.results | default([])) | selectattr('changed') | map(attribute='item.guest_name') | list }}"

- name: Résumé arrêt ESX02
  ansible.builtin.debug:
    msg:
      attempted: "{{ (targets_esx2_on | map(attribute='guest_name') | list) | default([]) }}"
      shutdown_guest_changed: "{{ (shutdown_esx2.results | default([])) | selectattr('changed') | map(attribute='item.guest_name') | list }}"
      poweroff_changed: "{{ (poweroff_esx2.results | default([])) | selectattr('changed') | map(attribute='item.guest_name') | list }}"
